import os
import sqlite3
import time

class Livro:
    def __init__(self, isbn, titulo, autor, disponivel=True):
        self.isbn = isbn
        self.titulo = titulo
        self.autor = autor
        self.disponivel = disponivel

    def emprestar(self):
        if self.disponivel:
            self.disponivel = False
            return True
        return False

    def devolver(self):
        if not self.disponivel:
            self.disponivel = True
            return True
        return False

    def __str__(self):
        status = "Disponível" if self.disponivel else "Indisponível"
        return f"ISBN: {self.isbn}, Título: {self.titulo}, Autor: {self.autor}, Status: {status}"


class Usuario:
    def __init__(self, id_usuario, nome):
        self.id_usuario = id_usuario
        self.nome = nome
        self.livros_emprestados = []

    def pegar_livro(self, livro):
        if livro.emprestar():
            self.livros_emprestados.append(livro)
            return True
        return False

    def devolver_livro(self, livro):
        if livro.devolver():
            self.livros_emprestados.remove(livro)
            return True
        return False

    def __str__(self):
        livros = ', '.join(livro.titulo for livro in self.livros_emprestados)
        return f"ID: {self.id_usuario}, Nome: {self.nome}, Livros Emprestados: {livros}"


class Biblioteca:
    def __init__(self):
        self.conn = sqlite3.connect('biblioteca.db')
        self.cursor = self.conn.cursor()
        self.create_tables()

    def create_tables(self):
        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS livros (
            isbn TEXT PRIMARY KEY,
            titulo TEXT NOT NULL,
            autor TEXT NOT NULL,
            disponivel INTEGER NOT NULL
        )''')

        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS usuarios (
            id_usuario INTEGER PRIMARY KEY,
            nome TEXT NOT NULL
        )''')

        self.conn.commit()

    def adicionar_livro(self, livro):
        self.cursor.execute('''
        INSERT OR REPLACE INTO livros (isbn, titulo, autor, disponivel) VALUES (?, ?, ?, ?)
        ''', (livro.isbn, livro.titulo, livro.autor, int(livro.disponivel)))
        self.conn.commit()

    def adicionar_usuario(self, usuario):
        self.cursor.execute('''
        INSERT OR REPLACE INTO usuarios (id_usuario, nome) VALUES (?, ?)
        ''', (usuario.id_usuario, usuario.nome))
        self.conn.commit()

    def emprestar_livro(self, isbn, id_usuario):
        livro = self.buscar_livro(isbn)
        usuario = self.buscar_usuario(id_usuario)

        if livro and usuario:
            if livro.emprestar():
                self.cursor.execute('UPDATE livros SET disponivel = ? WHERE isbn = ?', (0, isbn))
                self.conn.commit()
                print(f"Livro '{livro.titulo}' emprestado com sucesso para {usuario.nome}.")
            else:
                print(f"Livro '{livro.titulo}' não está disponível para emprestimo.")
        else:
            print("Livro ou usuário não encontrado.")

    def devolver_livro(self, isbn, id_usuario):
        livro = self.buscar_livro(isbn)
        usuario = self.buscar_usuario(id_usuario)

        if livro and usuario:
            if livro.devolver():
                self.cursor.execute('UPDATE livros SET disponivel = ? WHERE isbn = ?', (1, isbn))
                self.conn.commit()
                print(f"Livro '{livro.titulo}' devolvido com sucesso por {usuario.nome}.")
            else:
                print(f"Livro '{livro.titulo}' não foi emprestado por {usuario.nome}.")
        else:
            print("Livro ou usuário não encontrado.")

    def listar_livros(self):
        self.cursor.execute('SELECT * FROM livros')
        livros = self.cursor.fetchall()
        for livro in livros:
            livro_obj = Livro(livro[0], livro[1], livro[2], bool(livro[3]))
            print(livro_obj)

    def listar_usuarios(self):
        self.cursor.execute('SELECT * FROM usuarios')
        usuarios = self.cursor.fetchall()
        for usuario in usuarios:
            usuario_obj = Usuario(usuario[0], usuario[1])
            print(usuario_obj)

    def buscar_livro(self, isbn):
        self.cursor.execute('SELECT * FROM livros WHERE isbn = ?', (isbn,))
        livro = self.cursor.fetchone()
        if livro:
            return Livro(livro[0], livro[1], livro[2], bool(livro[3]))
        return None

    def buscar_usuario(self, id_usuario):
        self.cursor.execute('SELECT * FROM usuarios WHERE id_usuario = ?', (id_usuario,))
        usuario = self.cursor.fetchone()
        if usuario:
            return Usuario(usuario[0], usuario[1])
        return None

    def close(self):
        self.conn.close()


def limpar_tela():
    os.system('cls' if os.name == 'nt' else 'clear')


def menu():
    biblioteca = Biblioteca()

    while True:
        limpar_tela()
        print("\n1. Adicionar Livro")
        print("2. Adicionar Usuário")
        print("3. Emprestar Livro")
        print("4. Devolver Livro")
        print("5. Listar Livros")
        print("6. Listar Usuários")
        print("7. Sair")

        opcao = input("Escolha uma opção: ")

        if opcao == '1':
            isbn = input("ISBN: ")
            titulo = input("Título: ")
            autor = input("Autor: ")
            livro = Livro(isbn, titulo, autor)
            biblioteca.adicionar_livro(livro)
            print("Livro adicionado com sucesso!")
            time.sleep(2)  # Pausa para que o usuário possa ver a mensagem

        elif opcao == '2':
            id_usuario = int(input("ID do Usuário: "))
            nome = input("Nome: ")
            usuario = Usuario(id_usuario, nome)
            biblioteca.adicionar_usuario(usuario)
            print("Usuário adicionado com sucesso!")
            time.sleep(2)  # Pausa para que o usuário possa ver a mensagem

        elif opcao == '3':
            isbn = input("ISBN do Livro: ")
            id_usuario = int(input("ID do Usuário: "))
            biblioteca.emprestar_livro(isbn, id_usuario)
            time.sleep(2)  # Pausa para que o usuário possa ver a mensagem

        elif opcao == '4':
            isbn = input("ISBN do Livro: ")
            id_usuario = int(input("ID do Usuário: "))
            biblioteca.devolver_livro(isbn, id_usuario)
            time.sleep(2)  # Pausa para que o usuário possa ver a mensagem

        elif opcao == '5':
            print("Livros na biblioteca:")
            biblioteca.listar_livros()
            input("Pressione Enter para continuar...")
            
        elif opcao == '6':
            print("Usuários cadastrados:")
            biblioteca.listar_usuarios()
            input("Pressione Enter para continuar...")

        elif opcao == '7':
            biblioteca.close()
            print("Saindo...")
            break

        else:
            print("Opção inválida. Tente novamente.")
            time.sleep(2)  # Pausa para que o usuário possa ver a mensagem

if __name__ == "__main__":
    menu()

